0011000000000001
0011000100000101
1000001000000000
0011001100011010
1000010000110000
0011010100110011
1000011000100000
0111011001000000
1111001000000010
1111010000000100
0100001000000000
0100010000010000
0100011101100000
1000011000100000
1010001011111000
1111010100000111
1000001000000000
1000011000000000
1000011110000000
0100001100000000
0100010100000000
1000010000110000
1011001111110000
0011001100011010
0100001000010000
1000010000110000
1000011000100000
1000100100000000
1000101000100000
1111001000000010
0111011001000000
0100011101100000
0100010000010000
0100001000000000
1000011000100000
0100100100000000
1010100111111000
1111010100000111
1000001010100000
1000011000100000
1000011110000000
1000100100000000
0100001100000000
0100010100000000
1000010000110000
1011001111110000
1100010111101000


MOV3 R0 1 //
MOV3 R1 5 //고정 (덧셈에 사용)
MOV4 R2 R0
MOV3 R3 26
MOV4 R4 R3 //R2 =1++ R4 = 26++ 변수
MOV3 R5 51 /
MOV4 R6 R2 // 곱셈 연산용 레지스터
{
{
  MUL R6 R4 ((1x26))
  MOV2_ [R2] R2 [0] 1
  MOV2_ [R4] R4 [25] 26
  ADD R2 R0 ((2))
  ADD R4 R1 ((31))
  ADD R7 R6 // R7 은 곱의 합
  MOV4 R6 R2
} ->JZ1 R2<6 (-8)
MOV2_ [R5] R7 //[50] 곱의합
MOV4 R2 R0 R2=1 리셋
MOV4 R6 R0 R6=1 리셋
MOV4 R7 R8 R7=0 리셋
ADD R3 R0 ((27))
ADD R5 R0 ((51))
MOV4 R4 R3 R4 27으로시작
} -> JZ2 R3<31 (-16)
{
MOV3 R3 26
ADD R2 R1 ((6))
MOV4 R4 R3 ((26))
MOV4 R6 R2 ((6)) //곱셈용
MOV4 R9 R0 CNT
MOV4 R10 R2 ((6))
{
MOV2_ [R2] R2
  {
  MUL R6 R4
  ADD R7 R6 //곱셈 결과값 더함
  ADD R4 R1
  ADD R2 R0 ((6)) 7 8  9 10
  MOV4 R6 R2
  ADD R9 R0 ((2)) 3 4 5 6
} -> JZ1 R9<6 (-8)
  MOV2_ [R5] R7 //[55]
  MOV4 R2 R10 ((6))
  MOV4 R6 R2 ((6)) 곱셈용 초기화
  MOV4 R7 R8 ((0)) 곱덧셈용초기화
  MOV4 R9 R0 ((1)) CNT 초기화
  ADD R3 R0 ((27))
  ADD R5 R0 ((56))
  MOV4 R4 R3
  } -> JZ2 R3<31 (-16)
} -> JZ3 R5 < 76 (-24)

